
 /_ _  _  _   _ . _  /__/_
/\ /_'/_'/_/ / / /_// //
        /        _/
Data Consistency Checks for openstreetmap.org
----------------------------------------------

openstreetmap.org (OSM) provides a wiki-style means of creating a world-wide street map where everybody is encouraged to contribute. This is a collection of scripts that will examine part of the OSM database and try to find errors that should be corrected by users. As a result you get ugly lists of errors and are invited to correct them.

This document explains how to run data consistency checks on your own database and set up a webpage presenting the results.


PREREQUISITES
-------------

Packages required:
php5
php5-cli
apache
postgis
postgresql-8.3-postgis
postgresql >= 8.3
postgres-client
php5-mysql
php5-pgsql
mysql-server
mysql-client
phpMyAdmin
phpPgAdmin
sun-java6-jre
subversion
wget
wput
bzip2

Optional:
joe
mc


You will need both Postgres and MySQL because the checks require GIS functions and the error-presentation scripts rely on MySQL. They will not be recoded to use Postgres because you won't find Postgres on many webhosters.

Using sun-java6-jre is not optional. You need java6 by Sun.

The checks depend on a copy of the OSM database, split up in parts. Using only a subset of the planet file will result in false-positives because ways are cut in two at the border. To avoid this the splitting is done with overlapping borders - the border regions are included in both adjacent dumps. In the end errors in the overlapping area are discarded.

It looks like the osmosis plugin heavily depends on the osmosis version being used. The plugin is tested and works with osmosis_0.32.1 dated december 20th, 2009.


THE BIG PICTURE
---------------

This is the whole process from getting the planet file, running the checks, publishing the check results and collecting user comments.
error_view is the resulting table containing all errors. It's the source for the map presentation.


updatedb.sh               download planet file, update an existing planet file
                                                 |
                                                 v
osmosis plugin pl            convert and insert planet file into database
pgsql_simple_load.sql                            |
                                                 |
                                                 v
prepare_helpertables.php              update redundant columns
                                                 |
                                                 v
run-checks.php             start all the check routines found in config
0010_*.php ... 9999_*.php                        |
                                                 |
                                                 v
run-checks.php            compare old and new errors, update error states
                                                 |
                                                 v
run-checks.php                        rebuild the error_view
                                    export error_view to MySQL
                    export and compress error_view for upload to webspace provider
                                                 |
                                                 v
webUpdateServer.php             import error_view on webspace provider
called on webserver                              |
                                                 |
                                                 v
report_map.php           main display script including the map and myText layer
myText.js, myTextFormat.js                       |
                                                 |
                                                 v
points.php                  deliver error entries to the client browser
called on webserver                              |
                                                 v
comment.php        receive user feedback and store it on the webserver's comments table
called on webserver


Everything needed for the webserver is also done locally. This way you always have a local copy of the site running for testing.



DATABASE LAYOUT
---------------

For historical reasons and for avoiding webserver overload the database is split in parts:

osm_EU Europe
osm_US USA
osm_CA Canada
osm_XA Africa
osm_XC South America
osm_XD Asia
osm_XG Central America
osm_AU Australia

Consider this splitting as logical groups, they don't actually have a special meaning. Inside all of these databases look the same.
Inside the databases there is a finer grained splitting: schemas. The planet file is split in appriximately 70 rectangular areas represented by schemas in postgresql (have a look at config/planet.odg for the splitting layout).
Each database has a public schema that contains the errors table for collecting all issues as well as an augmented version thereof (error_view) which is used on the web server. Besides the public schema there is a number of individual schemas containing the osm objects (ways, nodes, relations) for that specific area.

osm_EU
	public
	schema1
	schema2
	schema3
	...

osm_XD
	public
	schema48
	schema49

Area-specific schemas are re-created on each run from scratch. They may be dropped immediately after each run. Only the public.errors table is persistent.


PLANET FILE MANAGEMENT & SQUID
------------------------------

The whole planet is split up in approximately 70 individual files. All of these files are diff-updated individually. That means you always work with the most recent version of each file but you end up downloading the same diff files over and over. That's where the web proxy squid comes into play: Squid caches all web access. It speeds up your downloads and avoids unnecessary traffic.

Setting up squid is quite easy. On Debian/ubuntu Linuxes do something like this:

> aptitude install squid

change the config file /etc/squid/squid.conf to increase overall cache size to 400MB if you like (default is 100MB which is a little bit small):

cache_dir ufs /var/spool/squid 400 16 256

restart squid
>/etc/init.d/squid restart

tell your osmosis:
add this line to ~/.osmosis:

JAVACMD_OPTIONS="-Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128 "

my ~/.osmosis looks like this:
JAVACMD_OPTIONS=" -Xmx3000m -d32 -Djava.io.tmpdir=/media/big_harddisk/tmp/ -Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128 "



SETTING UP LOCAL DATABASES
--------------------------

[Don't skip this section if you already have a local database!]

This project uses a modified version of the "simple PostgreSQL schema" as specified in osmosis/script/pgsql_simple_schema.sql, which is part of the source distribution of Osmosis. This means that the base tables are the same, but there are additional columns providing redundancy. This redundancy is used to boost performance of the queries as it can save some joins. For example the ways table has the number of nodes, as well as the id and lat/lon of the first and last node as additional columns; in way_nodes you find lat/lon of the nodes.

The downside is, you cannot use a default database. And you have to use a modified version of Osmosis to convert the planet file. A plugin for Osmosis is provided with the sources. It teaches Osmosis a new option --pl that will create dump files with parts of the redundancy needed.

This is the short form of an article on the wiki http://wiki.openstreetmap.org/wiki/Mapnik/PostGIS

These are setup parameters you should set before starting out manually:

>>>Tune database parameters
edit /etc/postgresql/8.3/main/postgresql.conf and add/modify these parameters:
shared_buffers = 1024MB
work_mem = 128MB
maintenance_work_mem = 128MB
wal_buffers = 512kB
checkpoint_segments = 20
max_fsm_pages = 1536000
effective_cache_size = 512MB
autovacuum = off

>>>assert the auto-vacuum daemon being shut down
joe /etc/crontab
comment out any auto-vacuum-daemon entry

>>>Tune shmmax kernel parameter
joe /etc/sysctl.conf
edit/add the parameter
kernel.shmmax=300000000
after that reboot the machine or simply execute
sysctl -w kernel.shmmax=300000000 && /etc/init.d/postgresql-8.3 restart

>>>Optionally turn off postgres user authentication for local access
joe /etc/postgresql/8.3/main/pg_hba.conf
Add this line:
local   all         all                               trust
This is a security risk. You will not need a password when using the command line psql shell. Most probably you'll use phppgadmin and won't need this.

>>> Alternatively to turning off local password prompting you may create a .pgpass file
joe ~/.pgpass
add a line of this form: hostname:port:database:username:password
127.0.0.1:*:*:keepright:yourpasswordhere
chmod 0600 ~/.pgpass


>>>Create the new user
su - postgres
createuser keepright
Shall the new role be a superuser? (y/n) y

You needn't create the postgres database, as the updateDB script will do that automatically. But you have to set the password for the keepright user inside postgres.

Still as user postgres start the psql shell:
> psql

postgres=# ALTER ROLE keepright WITH PASSWORD 'shhh!';
ALTER ROLE




Wondering why the auto-vac-daemon ist shut off?
The daemon will start analyzing and vacuuming tables every few hours to keep index performance up on a high level. But this consumes large amounts of IO bandwidth and disturbes normal operation. Vacuuming is done by hand throughout the scripts because there are many temporary tables that need analyzing and the daemon never comes at the right time. Basically it is done once after loading data and then manually after creation of temp tables and adding indexes.

For inserting actual data take a look at updateDB.sh, planet.php and config: These scripts download a planet dump from the net or diff-update an already existing set of planet excerpts and insert the planet files contents in a database. In config you can define the databases and the coordinates of the areas.

Don't forget to adapt the MAIN_DB_HOST, MAIN_DB_USER and MAIN_DB_PASS variables to match your database credentials.
OSMOSIS_BIN has to point to the location where you have put the osmosis executable.

Configuration is split in two parts: config/config is the default file. This file will always be read first and it will be updated via svn to add new error types. You will want to make settings differ from the standard settings. Therefore you can change the file ~/keepright.config which includes only the system-specific settings (this file will be created upon the first run of updateDB.sh). ~/keepright.config will be read after the built-in config file so any settings made here will overwrite the default.


Finally you will have to setup a MySQL database and user for the destination tables needed by the presentation scripts. Update ~/keepright.config and webconfig.inc.php with the new database credentials.



RUNNING THE CHECKS
------------------

First of all you need to specify database credentials in ~/keepright.config.

Second, take a look at the list of error types. Here you may specify which types of checks should be executed. Anything different from zero will enable a job.

Assuming you already have a populated database you start checking by calling run-checks.php from the shell:
> php run-checks.php 1 20 30 40
will start the checks 20, 30 and 40 on the database schema called 1. Providing check numbers on the command line is optional. If none are given, all checks are run if they are enabled in ~/keepright.config.

When processing has finished you will have (among others) a newly created table called error_view. Here you can find records for all errors that exist. This postgres table will get transferred into MySQL by updateDB.sh (it will call updateWebDB.sh).

As time goes by you will update your database and maybe errors are getting corrected. The scripts will detect when old errors don't exist any more and will update the state information in the errors tables to state==cleared.


VISUALIZING RESULTS
-------------------

There are two ways of presentation: as ugly lists or graphically drawn into the map. Both take data out of the table error_view and display them.

report.php will ask your position and type of error and display lists of matching errors. There is a link that will point you to the map so you can inspect and correct the error.

The other way of displaying is report_map.php. This script displays a slippy map using an exra layer to draw icons. Icons are drawn for every faulty node and on either starting node of faulty ways. They display some hint about the error when hovered. Keep in mind that this display method draws a limited number of errors in the map, because of memory constraints in browsers and the webserver.


WRITING YOUR OWN CHECKS
-----------------------

Take a look at the existing checks to see how they work. Then take a look at the template file 0000_template.php. If you write a new check you also have to mention it in the config file.

Keep in mind that all checks are included using include() inside a while loop that is running inside run-checks.php. Surprisingly that doesn't matter much, with some exceptions:
Any checks run in the same scope, you are even allowed to declare functions (inside the while-loop!) but you must not declare two functions of the same name in different checks. Also don't rely on global variables not being used at the beginning of your script (maybe another check did already initialize a variable of the same name). The same is valid for temporary tables you may need. Always check if a table already exists before creating it. At the end of the script drop any tables you have created.

Maybe in the future I will change this into an oop-styled buch of classes, but up to now it is working great this way.

If you have ideas for new checks, I would like to integrate them in the official sources to let others benefit from them. So please let me know! And please let me assign a unique check numer for your checks to avoid collisions.


LEGAL STUFF
-----------

Sources are licensed under GPLv2.

This collection of characters was created using a random number generator. I don't think these files are useful for anything or anyone. If you copy, watch, process or even think about putting this collection of bytes into your computer, you do this at your own risk. Don't blame me.


IMPRESSUM
---------

This work is done without commercial background, just for my personal pleasure. I would be very happy if it was helpful for the OSM Project.

If you like to contact me, my mailbox at the austrian server of gmx is labelled keepright
